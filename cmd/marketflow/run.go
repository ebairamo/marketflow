package marketflow

import (
	"context"
	"fmt"
	"log/slog"
	"marketflow/config"
	"marketflow/internal/adapters/cache"
	"marketflow/internal/adapters/exchange"
	"marketflow/internal/adapters/exchange/testdata"
	"marketflow/internal/adapters/storage"
	"marketflow/internal/adapters/web"
	"marketflow/internal/application/concurrency"
	"marketflow/internal/application/services"
	"marketflow/internal/domain"
	"marketflow/pkg/logger"
	"net/http"
	"os"
	"os/signal"
	"strconv"
	"sync"
	"syscall"
	"time"
)

func Run() {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–ª–∞–≥–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	if len(os.Args) > 1 {
		switch os.Args[1] {
		case "--help", "-h":
			printUsage()
			return
		case "--port":
			if len(os.Args) < 3 {
				fmt.Fprintf(os.Stderr, "Error: --port requires a port number\n")
				printUsage()
				os.Exit(1)
			}
			_, err := strconv.Atoi(os.Args[2])
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error: invalid port number '%s'\n", os.Args[2])
				printUsage()
				os.Exit(1)
			}
			// –ü–æ—Ä—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
		default:
			if os.Args[1][0] == '-' {
				fmt.Fprintf(os.Stderr, "Error: unknown flag '%s'\n", os.Args[1])
				printUsage()
				os.Exit(1)
			}
		}
	}

	log := logger.SetupLogger()
	log.Info("üöÄ –ó–∞–ø—É—Å–∫ MarketFlow - —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏—Ä–∂–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.LoadConfig("config/config.yaml")
	if err != nil {
		log.Error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", "error", err)
		os.Exit(1)
	}

	// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
	if len(os.Args) > 2 && os.Args[1] == "--port" {
		if port, err := strconv.Atoi(os.Args[2]); err == nil {
			cfg.API.Port = port
		}
	}

	// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
	log.Info("üìä –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL...")
	postgresStorage, err := storage.NewPostgresStorage(cfg.Postgres.ConnectionString(), log)
	if err != nil {
		log.Error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL", "error", err)
		os.Exit(1)
	}
	defer func() {
		if err := postgresStorage.Close(); err != nil {
			log.Error("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è PostgreSQL", "error", err)
		}
	}()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
	log.Info("üíæ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis...")
	redisAddr := fmt.Sprintf("%s:%d", cfg.Redis.Host, cfg.Redis.Port)
	redisCache, err := cache.NewRedisCache(redisAddr, cfg.Redis.Password, cfg.Redis.DB, log)
	if err != nil {
		log.Error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis", "error", err)
		os.Exit(1)
	}
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback storage
	redisCache.SetStorage(postgresStorage)
	defer func() {
		if err := redisCache.Close(); err != nil {
			log.Error("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Redis", "error", err)
		}
	}()

	// –°–æ–∑–¥–∞—ë–º –±–∏—Ä–∂–∏ –¥–ª—è Live —Ä–µ–∂–∏–º–∞
	log.Info("üèõÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂...")
	var liveExchanges []domain.ExchangePort
	var liveExchangeNames []string
	for _, exCfg := range cfg.Exchanges {
		exchange := exchange.NewTCPExchange(exCfg.Address, exCfg.Name, log)
		liveExchanges = append(liveExchanges, exchange)
		liveExchangeNames = append(liveExchangeNames, exCfg.Name)
	}

	// –ò–º–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–∏—Ä–∂
	testExchangeNames := []string{"TestExchange1", "TestExchange2", "TestExchange3"}

	// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞–º–∏
	var (
		currentExchanges  []domain.ExchangePort
		marketService     *services.MarketService
		workerPool        *concurrency.WorkerPool
		aggregationCancel context.CancelFunc
		serviceCtx        context.Context
		serviceCancel     context.CancelFunc
		messageCh         <-chan domain.Message
		errCh             <-chan error
		mu                sync.Mutex // –ó–∞—â–∏—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–≤
	)

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
	startServices := func(exchanges []domain.ExchangePort, exchangeNames []string, webHandler *web.Handler) {
		mu.Lock()
		defer mu.Unlock()

		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
		if serviceCancel != nil {
			serviceCancel()
			// –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ graceful shutdown
			time.Sleep(500 * time.Millisecond)
		}

		if aggregationCancel != nil {
			aggregationCancel()
		}

		// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
		serviceCtx, serviceCancel = context.WithCancel(ctx)

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –±–∏—Ä–∂ –≤ handler
		webHandler.UpdateValidExchanges(exchangeNames)

		// –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		marketService = services.NewMarketService(exchanges, postgresStorage, redisCache, log)

		// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
		messageCh, errCh = marketService.Start(serviceCtx)

		// –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Worker Pool
		workerPool = concurrency.NewWorkerPool(5, postgresStorage, redisCache, log)
		workerPool.Start(serviceCtx, messageCh)

		// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
		var aggregationCtx context.Context
		aggregationCtx, aggregationCancel = context.WithCancel(serviceCtx)
		go startAggregationTask(aggregationCtx, redisCache, postgresStorage, log)
	}

	// –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	webHandler := web.NewHandler(redisCache, postgresStorage, log)
	httpServer := webHandler.Setup(cfg.API.Port)

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		log.Info("üåê –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É", "port", cfg.API.Port)
		if err := httpServer.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞", "error", err)
		}
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (Live —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
	log.Info("üîß –ó–∞–ø—É—Å–∫ –≤ Live —Ä–µ–∂–∏–º–µ")
	currentExchanges = liveExchanges
	startServices(currentExchanges, liveExchangeNames, webHandler)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	signalCh := make(chan os.Signal, 1)
	signal.Notify(signalCh, syscall.SIGINT, syscall.SIGTERM)

	// –ö–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
	modeCh := webHandler.GetModeChannel()

	log.Info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

	// –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	messageCount := 0
	errorCount := 0
	startTime := time.Now()
	lastStatTime := time.Now()

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
	for {
		select {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
		case mode := <-modeCh:
			if mode {
				log.Info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ Live —Ä–µ–∂–∏–º")
				currentExchanges = liveExchanges
				startServices(currentExchanges, liveExchangeNames, webHandler)

				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
				messageCount = 0
				errorCount = 0
				startTime = time.Now()
			} else {
				log.Info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ Test —Ä–µ–∂–∏–º")

				// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–∏—Ä–∂–∏
				testExchanges := testdata.CreateTestExchanges(log)
				currentExchanges = testExchanges
				startServices(currentExchanges, testExchangeNames, webHandler)

				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
				messageCount = 0
				errorCount = 0
				startTime = time.Now()
			}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
		case _, ok := <-messageCh:
			if !ok {
				// –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–≤
				continue
			}

			messageCount++

			// –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
			if time.Since(lastStatTime) > 10*time.Second {
				rate := float64(messageCount) / time.Since(startTime).Seconds()
				log.Info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
					"total_messages", messageCount,
					"total_errors", errorCount,
					"rate", fmt.Sprintf("%.2f msg/sec", rate),
					"uptime", time.Since(startTime).Round(time.Second))
				lastStatTime = time.Now()
			}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
		case err, ok := <-errCh:
			if !ok {
				// –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–≤
				continue
			}

			errorCount++

			// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—É—é 10-—é –æ—à–∏–±–∫—É —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
			if errorCount%10 == 1 {
				log.Error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
					"error", err,
					"total_errors", errorCount)
			}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
		case sig := <-signalCh:
			log.Info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...",
				"signal", sig)

			// –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è shutdown
			shutdownCtx, shutdownCancel := context.WithTimeout(context.Background(), 30*time.Second)
			defer shutdownCancel()

			// WaitGroup –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
			var shutdownWg sync.WaitGroup

			// 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
			shutdownWg.Add(1)
			go func() {
				defer shutdownWg.Done()
				log.Info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä...")
				if err := httpServer.Shutdown(shutdownCtx); err != nil {
					log.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ HTTP-—Å–µ—Ä–≤–µ—Ä–∞", "error", err)
				} else {
					log.Info("HTTP-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
				}
			}()

			// 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é
			if aggregationCancel != nil {
				log.Info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
				aggregationCancel()
			}

			// 3. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
			if serviceCancel != nil {
				log.Info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
				serviceCancel()
			}

			// 4. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MarketService
			if marketService != nil {
				shutdownWg.Add(1)
				go func() {
					defer shutdownWg.Done()
					log.Info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º market service...")
					marketService.Stop()
					log.Info("Market service –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
				}()
			}

			// 5. –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Worker Pool
			if workerPool != nil {
				shutdownWg.Add(1)
				go func() {
					defer shutdownWg.Done()
					log.Info("–û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è worker pool...")
					workerPool.Wait()
					totalProcessed := workerPool.GetTotalProcessed()
					log.Info("Worker pool –∑–∞–≤–µ—Ä—à—ë–Ω",
						"total_processed", totalProcessed)
				}()
			}

			// 6. Flush –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
			shutdownWg.Add(1)
			go func() {
				defer shutdownWg.Done()
				log.Info("–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL...")
				if err := postgresStorage.FlushBuffer(); err != nil {
					log.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", "error", err)
				} else {
					log.Info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
				}
			}()

			// –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞
			done := make(chan struct{})
			go func() {
				shutdownWg.Wait()
				close(done)
			}()

			select {
			case <-done:
				log.Info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
			case <-shutdownCtx.Done():
				log.Warn("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç shutdown, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
			}

			// –û—Ç–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
			cancel()

			// –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
			uptime := time.Since(startTime)
			log.Info("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
				"total_messages", messageCount,
				"total_errors", errorCount,
				"uptime", uptime.Round(time.Second),
				"avg_rate", fmt.Sprintf("%.2f msg/sec", float64(messageCount)/uptime.Seconds()))

			log.Info("üëã MarketFlow –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			return
		}
	}
}

func printUsage() {
	fmt.Print(`Usage:
  marketflow [--port <N>]
  marketflow --help

Options:
  --port N     Port number
`)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
func startAggregationTask(ctx context.Context, cache domain.CachePort, storage domain.StoragePort, logger *slog.Logger) {
	ticker := time.NewTicker(time.Minute)
	defer ticker.Stop()

	logger.Info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)")

	for {
		select {
		case <-ctx.Done():
			logger.Info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
			return
		case <-ticker.C:
			// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä
			symbols := []string{"BTCUSDT", "DOGEUSDT", "TONUSDT", "SOLUSDT", "ETHUSDT"}

			aggregatedCount := 0
			startTime := time.Now()

			for _, symbol := range symbols {
				// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É –∏–∑ Redis
				messages, err := cache.GetPricesInRange(symbol, time.Minute)
				if err != nil {
					logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏",
						"error", err,
						"symbol", symbol)
					continue
				}

				if len(messages) == 0 {
					continue
				}

				// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –±–∏—Ä–∂–µ
				exchangeData := make(map[string][]domain.Message)
				for _, msg := range messages {
					exchangeData[msg.Exchange] = append(exchangeData[msg.Exchange], msg)
				}

				// –î–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
				for exchange, msgs := range exchangeData {
					if len(msgs) == 0 {
						continue
					}

					// –í—ã—á–∏—Å–ª—è–µ–º min, max –∏ avg
					var sum float64
					min := msgs[0].Price
					max := msgs[0].Price

					for _, m := range msgs {
						sum += m.Price
						if m.Price < min {
							min = m.Price
						}
						if m.Price > max {
							max = m.Price
						}
					}

					avg := sum / float64(len(msgs))

					// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
					aggregated := domain.AggregatedData{
						PairName:     symbol,
						Exchange:     exchange,
						Timestamp:    time.Now(),
						AveragePrice: avg,
						MinPrice:     min,
						MaxPrice:     max,
					}

					// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PostgreSQL
					if err := storage.SaveAggregatedData(aggregated); err != nil {
						logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
							"error", err,
							"symbol", symbol,
							"exchange", exchange)
					} else {
						aggregatedCount++
						logger.Debug("–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
							"symbol", symbol,
							"exchange", exchange,
							"avg", fmt.Sprintf("%.2f", avg),
							"min", fmt.Sprintf("%.2f", min),
							"max", fmt.Sprintf("%.2f", max),
							"samples", len(msgs))
					}
				}
			}

			if aggregatedCount > 0 {
				logger.Info("–ê–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
					"aggregated_records", aggregatedCount,
					"duration", time.Since(startTime).Round(time.Millisecond))
			}
		}
	}
}
