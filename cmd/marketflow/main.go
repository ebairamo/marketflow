package main

import (
	"context"
	"fmt"
	"marketflow/config"
	"marketflow/internal/adapters/cache"
	"marketflow/internal/adapters/exchange"
	"marketflow/internal/adapters/storage"
	"marketflow/internal/application/concurrency"
	"marketflow/internal/application/services"
	"marketflow/internal/domain"
	"marketflow/pkg/logger"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func main() {
	log := logger.SetupLogger()
	log.Info("üöÄ –ó–∞–ø—É—Å–∫ MarketFlow - —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏—Ä–∂–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.LoadConfig("config/config.yaml")
	if err != nil {
		log.Error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", "error", err)
		os.Exit(1)
	}

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
	log.Info("üìä –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL...")
	postgresStorage, err := storage.NewPostgresStorage(cfg.Postgres.ConnectionString(), log)
	if err != nil {
		log.Error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL", "error", err)
		os.Exit(1)
	}
	defer postgresStorage.Close()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
	log.Info("üíæ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis...")
	redisAddr := fmt.Sprintf("%s:%d", cfg.Redis.Host, cfg.Redis.Port)
	redisCache, err := cache.NewRedisCache(redisAddr, cfg.Redis.Password, cfg.Redis.DB, log)
	if err != nil {
		log.Error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis", "error", err)
		os.Exit(1)
	}
	defer redisCache.Close()

	// –°–æ–∑–¥–∞—ë–º –±–∏—Ä–∂–∏
	log.Info("üèõÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∏—Ä–∂–∞–º...")
	var exchanges []domain.ExchangePort
	for _, exCfg := range cfg.Exchanges {
		exchange := exchange.NewTCPExchange(exCfg.Address, exCfg.Name, log)
		exchanges = append(exchanges, exchange)
	}

	// –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
	marketService := services.NewMarketService(exchanges, postgresStorage, redisCache, log)

	workerPool := concurrency.NewWorkerPool(5, postgresStorage, redisCache, log)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
	messageCh, errCh := marketService.Start(ctx)

	workerPool.Start(ctx, messageCh)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	signalCh := make(chan os.Signal, 1)
	signal.Notify(signalCh, syscall.SIGINT, syscall.SIGTERM)

	log.Info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

	// –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	messageCount := 0
	startTime := time.Now()

	for {
		select {
		case msg := <-messageCh:
			messageCount++

			// –ö—ç—à–∏—Ä—É–µ–º –≤ Redis
			if err := redisCache.CachePrice(msg); err != nil {
				log.Error("–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è", "error", err)
			}

			// –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ 100-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ª–æ–≥–æ–≤
			if messageCount%100 == 0 {
				rate := float64(messageCount) / time.Since(startTime).Seconds()
				log.Info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
					"total", messageCount,
					"rate", fmt.Sprintf("%.2f msg/sec", rate),
					"last_symbol", msg.Symbol,
					"last_price", msg.Price)
			}

		case err := <-errCh:
			log.Error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", "error", err)

		case <-signalCh:
			log.Info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É...")
			cancel()
			time.Sleep(time.Second) // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ graceful shutdown
			log.Info("üëã MarketFlow –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			return
		}
	}
}
