package main

import (
	"context"
	"fmt"
	"log/slog"
	"marketflow/config"
	"marketflow/internal/adapters/cache"
	"marketflow/internal/adapters/exchange"
	"marketflow/internal/adapters/exchange/testdata"
	"marketflow/internal/adapters/storage"
	"marketflow/internal/adapters/web"
	"marketflow/internal/application/concurrency"
	"marketflow/internal/application/services"
	"marketflow/internal/domain"
	"marketflow/pkg/logger"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func main() {
	log := logger.SetupLogger()
	log.Info("üöÄ –ó–∞–ø—É—Å–∫ MarketFlow - —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏—Ä–∂–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.LoadConfig("config/config.yaml")
	if err != nil {
		log.Error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", "error", err)
		os.Exit(1)
	}

	// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
	log.Info("üìä –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL...")
	postgresStorage, err := storage.NewPostgresStorage(cfg.Postgres.ConnectionString(), log)
	if err != nil {
		log.Error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL", "error", err)
		os.Exit(1)
	}
	defer postgresStorage.Close()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
	log.Info("üíæ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis...")
	redisAddr := fmt.Sprintf("%s:%d", cfg.Redis.Host, cfg.Redis.Port)
	redisCache, err := cache.NewRedisCache(redisAddr, cfg.Redis.Password, cfg.Redis.DB, log)
	if err != nil {
		log.Error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis", "error", err)
		os.Exit(1)
	}
	// –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è redisCache
	redisCache.SetStorage(postgresStorage)
	defer redisCache.Close()

	// –°–æ–∑–¥–∞—ë–º –±–∏—Ä–∂–∏ –¥–ª—è Live —Ä–µ–∂–∏–º–∞
	log.Info("üèõÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂...")
	var liveExchanges []domain.ExchangePort
	for _, exCfg := range cfg.Exchanges {
		exchange := exchange.NewTCPExchange(exCfg.Address, exCfg.Name, log)
		liveExchanges = append(liveExchanges, exchange)
	}

	// –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∏—Ä–∂–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - Live —Ä–µ–∂–∏–º)
	var currentExchanges []domain.ExchangePort = liveExchanges

	// –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	marketService := services.NewMarketService(currentExchanges, postgresStorage, redisCache, log)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
	workerPool := concurrency.NewWorkerPool(5, postgresStorage, redisCache, log)

	// –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	webHandler := web.NewHandler(redisCache, postgresStorage, log)
	httpServer := webHandler.Setup(cfg.API.Port)

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		log.Info("üåê –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É", "port", cfg.API.Port)
		if err := httpServer.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞", "error", err)
		}
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
	messageCh, errCh := marketService.Start(ctx)

	// –ó–∞–ø—É—Å–∫–∞–µ–º Worker Pool
	workerPool.Start(ctx, messageCh)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
	aggregationCtx, aggregationCancel := context.WithCancel(ctx)
	go startAggregationTask(aggregationCtx, redisCache, postgresStorage, log)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	signalCh := make(chan os.Signal, 1)
	signal.Notify(signalCh, syscall.SIGINT, syscall.SIGTERM)

	// –ö–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
	modeCh := webHandler.GetModeChannel()

	log.Info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

	// –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	messageCount := 0
	startTime := time.Now()

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
	for {
		select {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
		case mode := <-modeCh:
			if mode {
				log.Info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ Live —Ä–µ–∂–∏–º")

				// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
				aggregationCancel()

				// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
				newCtx, newCancel := context.WithCancel(context.Background())

				// –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –≤—Å–µ –≥–æ—Ä—É—Ç–∏–Ω—ã
				cancel()

				// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –µ–≥–æ –æ—Ç–º–µ–Ω—É
				ctx = newCtx
				cancel = newCancel

				// –ò—Å–ø–æ–ª—å–∑—É–µ–º Live –±–∏—Ä–∂–∏
				currentExchanges = liveExchanges

				// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å Live –±–∏—Ä–∂–∞–º–∏
				marketService = services.NewMarketService(currentExchanges, postgresStorage, redisCache, log)

				// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –±–∏—Ä–∂–∞–º–∏
				messageCh, errCh = marketService.Start(ctx)

				// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π Worker Pool
				workerPool = concurrency.NewWorkerPool(5, postgresStorage, redisCache, log)
				workerPool.Start(ctx, messageCh)

				// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
				aggregationCtx, aggregationCancel = context.WithCancel(ctx)
				go startAggregationTask(aggregationCtx, redisCache, postgresStorage, log)

				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
				messageCount = 0
				startTime = time.Now()
			} else {
				log.Info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ Test —Ä–µ–∂–∏–º")

				// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
				aggregationCancel()

				// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
				newCtx, newCancel := context.WithCancel(context.Background())

				// –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –≤—Å–µ –≥–æ—Ä—É—Ç–∏–Ω—ã
				cancel()

				// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –µ–≥–æ –æ—Ç–º–µ–Ω—É
				ctx = newCtx
				cancel = newCancel

				// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–∏—Ä–∂–∏
				testExchanges := testdata.CreateTestExchanges(log)
				currentExchanges = testExchanges

				// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –±–∏—Ä–∂–∞–º–∏
				marketService = services.NewMarketService(currentExchanges, postgresStorage, redisCache, log)

				// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –±–∏—Ä–∂–∞–º–∏
				messageCh, errCh = marketService.Start(ctx)

				// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π Worker Pool
				workerPool = concurrency.NewWorkerPool(5, postgresStorage, redisCache, log)
				workerPool.Start(ctx, messageCh)

				// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
				aggregationCtx, aggregationCancel = context.WithCancel(ctx)
				go startAggregationTask(aggregationCtx, redisCache, postgresStorage, log)

				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
				messageCount = 0
				startTime = time.Now()
			}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
		case msg, ok := <-messageCh:
			if !ok {
				log.Error("–ö–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
				continue
			}

			messageCount++

			// –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ 100-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ª–æ–≥–æ–≤
			if messageCount%100 == 0 {
				rate := float64(messageCount) / time.Since(startTime).Seconds()
				log.Info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
					"total", messageCount,
					"rate", fmt.Sprintf("%.2f msg/sec", rate),
					"last_symbol", msg.Symbol,
					"last_price", msg.Price)
			}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
		case err, ok := <-errCh:
			if !ok {
				log.Error("–ö–∞–Ω–∞–ª –æ—à–∏–±–æ–∫ –∑–∞–∫—Ä—ã—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
				continue
			}
			log.Error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", "error", err)

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
		case <-signalCh:
			log.Info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É...")

			// –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
			shutdownCtx, shutdownCancel := context.WithTimeout(context.Background(), 5*time.Second)
			defer shutdownCancel()

			if err := httpServer.Shutdown(shutdownCtx); err != nil {
				log.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ HTTP-—Å–µ—Ä–≤–µ—Ä–∞", "error", err)
			}

			// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é
			aggregationCancel()

			// –ó–∞—Ç–µ–º –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
			cancel()

			// –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ graceful shutdown
			time.Sleep(time.Second)

			log.Info("üëã MarketFlow –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			return
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
// –ò–∑–º–µ–Ω–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ - —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç *slog.Logger –≤–º–µ—Å—Ç–æ slog.Logger
func startAggregationTask(ctx context.Context, cache domain.CachePort, storage domain.StoragePort, logger *slog.Logger) {
	ticker := time.NewTicker(time.Minute)
	defer ticker.Stop()

	logger.Info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)")

	for {
		select {
		case <-ctx.Done():
			logger.Info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
			return
		case <-ticker.C:
			// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä
			symbols := []string{"BTCUSDT", "DOGEUSDT", "TONUSDT", "SOLUSDT", "ETHUSDT"}

			for _, symbol := range symbols {
				// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É –∏–∑ Redis
				messages, err := cache.GetPricesInRange(symbol, time.Minute)
				if err != nil {
					logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", "error", err, "symbol", symbol)
					continue
				}

				// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –±–∏—Ä–∂–µ
				exchangeData := make(map[string][]domain.Message)
				for _, msg := range messages {
					exchangeData[msg.Exchange] = append(exchangeData[msg.Exchange], msg)
				}

				// –î–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
				for exchange, msgs := range exchangeData {
					if len(msgs) == 0 {
						continue
					}

					// –í—ã—á–∏—Å–ª—è–µ–º min, max –∏ avg
					var sum float64
					min := msgs[0].Price
					max := msgs[0].Price

					for _, m := range msgs {
						sum += m.Price
						if m.Price < min {
							min = m.Price
						}
						if m.Price > max {
							max = m.Price
						}
					}

					avg := sum / float64(len(msgs))

					// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
					aggregated := domain.AggregatedData{
						PairName:     symbol,
						Exchange:     exchange,
						Timestamp:    time.Now(),
						AveragePrice: avg,
						MinPrice:     min,
						MaxPrice:     max,
					}

					// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PostgreSQL
					if err := storage.SaveAggregatedData(aggregated); err != nil {
						logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
							"error", err,
							"symbol", symbol,
							"exchange", exchange)
					} else {
						logger.Info("–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
							"symbol", symbol,
							"exchange", exchange,
							"avg", avg,
							"min", min,
							"max", max)
					}
				}
			}
		}
	}
}
