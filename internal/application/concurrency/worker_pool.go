package concurrency

import (
	"context"
	"log/slog"
	"marketflow/internal/domain"
	"sync"
	"sync/atomic"
	"time"
)

type WorkerPool struct {
	workersPerExchange int
	storage            domain.StoragePort
	cache              domain.CachePort
	logger             *slog.Logger
	wg                 sync.WaitGroup
	totalProcessed     int64 // –ê—Ç–æ–º–∞—Ä–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
}

func NewWorkerPool(workersPerExchange int, storage domain.StoragePort, cache domain.CachePort, logger *slog.Logger) *WorkerPool {
	return &WorkerPool{
		workersPerExchange: workersPerExchange,
		storage:            storage,
		cache:              cache,
		logger:             logger,
	}
}

func (wp *WorkerPool) Start(ctx context.Context, inputCh <-chan domain.Message) {
	exchangeChannels := make(map[string]chan domain.Message)
	var channelsMu sync.RWMutex

	// –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
	dispatcherDone := make(chan struct{})

	// Fan-out –¥–∏—Å–ø–µ—Ç—á–µ—Ä: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –±–∏—Ä–∂–∞–º
	go func() {
		defer close(dispatcherDone)

		for {
			select {
			case <-ctx.Done():
				wp.logger.Info("Dispatcher stopping, closing exchange channels")

				// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –±–∏—Ä–∂
				channelsMu.Lock()
				for exchange, ch := range exchangeChannels {
					close(ch)
					wp.logger.Debug("Closed channel for exchange", "exchange", exchange)
				}
				channelsMu.Unlock()
				return

			case msg, ok := <-inputCh:
				if !ok {
					wp.logger.Info("Input channel closed, stopping dispatcher")

					// –í—Ö–æ–¥–Ω–æ–π –∫–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç - –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –±–∏—Ä–∂
					channelsMu.Lock()
					for exchange, ch := range exchangeChannels {
						close(ch)
						wp.logger.Debug("Closed channel for exchange", "exchange", exchange)
					}
					channelsMu.Unlock()
					return
				}

				// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª –¥–ª—è –±–∏—Ä–∂–∏
				channelsMu.RLock()
				ch, exists := exchangeChannels[msg.Exchange]
				channelsMu.RUnlock()

				if !exists {
					channelsMu.Lock()
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â—ë —Ä–∞–∑ –ø–æ–¥ write lock
					ch, exists = exchangeChannels[msg.Exchange]
					if !exists {
						// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –∏ –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –±–∏—Ä–∂–∏
						ch = make(chan domain.Message, 100)
						exchangeChannels[msg.Exchange] = ch

						// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –Ω–æ–≤–æ–π –±–∏—Ä–∂–∏
						for i := 0; i < wp.workersPerExchange; i++ {
							wp.wg.Add(1)
							go wp.worker(ctx, msg.Exchange, i, ch)
						}

						wp.logger.Info("Created workers for new exchange",
							"exchange", msg.Exchange,
							"workers", wp.workersPerExchange)
					}
					channelsMu.Unlock()
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –±–∏—Ä–∂–∏
				select {
				case ch <- msg:
				case <-ctx.Done():
					return
				default:
					// –ö–∞–Ω–∞–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω - –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
					wp.logger.Warn("Channel full, dropping message",
						"exchange", msg.Exchange,
						"symbol", msg.Symbol)
				}
			}
		}
	}()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	go func() {
		ticker := time.NewTicker(30 * time.Second)
		defer ticker.Stop()

		for {
			select {
			case <-ctx.Done():
				return
			case <-ticker.C:
				processed := atomic.LoadInt64(&wp.totalProcessed)
				wp.logger.Info("üîß Worker Pool Statistics",
					"total_processed", processed,
					"active_exchanges", len(exchangeChannels))
			}
		}
	}()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	go func() {
		// –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
		<-dispatcherDone

		// –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
		wp.wg.Wait()

		// –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		finalProcessed := atomic.LoadInt64(&wp.totalProcessed)
		wp.logger.Info("üîß Worker Pool stopped",
			"total_processed", finalProcessed)
	}()
}

func (wp *WorkerPool) worker(ctx context.Context, exchange string, id int, ch <-chan domain.Message) {
	defer wp.wg.Done()

	wp.logger.Info("üîß Worker started",
		"exchange", exchange,
		"worker_id", id)

	processedCount := 0
	batchBuffer := make([]domain.Message, 0, 10)
	batchTicker := time.NewTicker(5 * time.Second)
	defer batchTicker.Stop()

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞
	processBatch := func() {
		if len(batchBuffer) == 0 {
			return
		}

		// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–∞—Ç—á–µ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
		for _, msg := range batchBuffer {
			// –ö—ç—à–∏—Ä—É–µ–º —Ü–µ–Ω—É
			if err := wp.cache.CachePrice(msg); err != nil {
				wp.logger.Error("Failed to cache price",
					"error", err,
					"exchange", exchange,
					"symbol", msg.Symbol)
			}
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á—ë—Ç—á–∏–∫
		atomic.AddInt64(&wp.totalProcessed, int64(len(batchBuffer)))

		// –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
		batchBuffer = batchBuffer[:0]
	}

	for {
		select {
		case <-ctx.Done():
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞—Ç—á –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
			processBatch()

			wp.logger.Info("üîß Worker stopped by context",
				"exchange", exchange,
				"worker_id", id,
				"processed", processedCount)
			return

		case <-batchTicker.C:
			// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
			processBatch()

		case msg, ok := <-ch:
			if !ok {
				// –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞—Ç—á –∏ –≤—ã—Ö–æ–¥–∏–º
				processBatch()

				wp.logger.Info("üîß Worker stopped, channel closed",
					"exchange", exchange,
					"worker_id", id,
					"processed", processedCount)
				return
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á
			batchBuffer = append(batchBuffer, msg)
			processedCount++

			// –ï—Å–ª–∏ –±–∞—Ç—á –∑–∞–ø–æ–ª–Ω–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
			if len(batchBuffer) >= 10 {
				processBatch()
			}

			// –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π
			if processedCount%1000 == 0 {
				wp.logger.Debug("Worker progress",
					"exchange", exchange,
					"worker_id", id,
					"processed", processedCount)
			}
		}
	}
}

// Wait –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
func (wp *WorkerPool) Wait() {
	wp.wg.Wait()
}

// GetTotalProcessed –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (wp *WorkerPool) GetTotalProcessed() int64 {
	return atomic.LoadInt64(&wp.totalProcessed)
}
